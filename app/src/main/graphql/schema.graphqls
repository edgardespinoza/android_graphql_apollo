"""
A high precision floating point value represented as a string
"""
scalar BigFloat

"""
Boolean expression comparing fields on type "BigFloat"
"""
input BigFloatFilter {
  eq: BigFloat

  gt: BigFloat

  gte: BigFloat

  in: [BigFloat!]

  is: FilterIs

  lt: BigFloat

  lte: BigFloat

  neq: BigFloat
}

"""
An arbitrary size integer represented as a string
"""
scalar BigInt

"""
Boolean expression comparing fields on type "BigInt"
"""
input BigIntFilter {
  eq: BigInt

  gt: BigInt

  gte: BigInt

  in: [BigInt!]

  is: FilterIs

  lt: BigInt

  lte: BigInt

  neq: BigInt
}

"""
A value that is true or false
"""
scalar Boolean

"""
Boolean expression comparing fields on type "Boolean"
"""
input BooleanFilter {
  eq: Boolean

  is: FilterIs
}

"""
An opaque string using for tracking a position in results during pagination
"""
scalar Cursor

"""
A date wihout time information
"""
scalar Date

"""
Boolean expression comparing fields on type "Date"
"""
input DateFilter {
  eq: Date

  gt: Date

  gte: Date

  in: [Date!]

  is: FilterIs

  lt: Date

  lte: Date

  neq: Date
}

"""
A date and time
"""
scalar Datetime

"""
Boolean expression comparing fields on type "Datetime"
"""
input DatetimeFilter {
  eq: Datetime

  gt: Datetime

  gte: Datetime

  in: [Datetime!]

  is: FilterIs

  lt: Datetime

  lte: Datetime

  neq: Datetime
}

enum FilterIs {
  NULL

  NOT_NULL
}

"""
A scalar floating point value up to 32 bits
"""
scalar Float

"""
Boolean expression comparing fields on type "Float"
"""
input FloatFilter {
  eq: Float

  gt: Float

  gte: Float

  in: [Float!]

  is: FilterIs

  lt: Float

  lte: Float

  neq: Float
}

"""
A globally unique identifier for a given record
"""
scalar ID

"""
Boolean expression comparing fields on type "ID"
"""
input IDFilter {
  eq: ID
}

"""
A scalar integer up to 32 bits
"""
scalar Int

"""
Boolean expression comparing fields on type "Int"
"""
input IntFilter {
  eq: Int

  gt: Int

  gte: Int

  in: [Int!]

  is: FilterIs

  lt: Int

  lte: Int

  neq: Int
}

"""
A Javascript Object Notation value serialized as a string
"""
scalar JSON

"""
The root type for creating and mutating data
"""
type Mutation {
  """
  Deletes zero or more records from the `product` collection
  """
  deleteFromproductCollection("Restricts the mutation's impact to records matching the criteria" filter: productFilter, "The maximum number of records in the collection permitted to be affected" atMost: Int! = 1): productDeleteResponse!

  """
  Adds one or more `product` records to the collection
  """
  insertIntoproductCollection(objects: [productInsertInput!]!): productInsertResponse

  """
  Updates zero or more records in the `product` collection
  """
  updateproductCollection("Fields that are set will be updated for all records matching the `filter`" set: productUpdateInput!, "Restricts the mutation's impact to records matching the criteria" filter: productFilter, "The maximum number of records in the collection permitted to be affected" atMost: Int! = 1): productUpdateResponse!
}

interface Node {
  """
  Retrieves a record by `ID`
  """
  nodeId: ID!
}

"""
Any type not handled by the type system
"""
scalar Opaque

"""
Boolean expression comparing fields on type "Opaque"
"""
input OpaqueFilter {
  eq: Opaque

  is: FilterIs
}

"""
Defines a per-field sorting order
"""
enum OrderByDirection {
  """
  Ascending order, nulls first
  """
  AscNullsFirst

  """
  Ascending order, nulls last
  """
  AscNullsLast

  """
  Descending order, nulls first
  """
  DescNullsFirst

  """
  Descending order, nulls last
  """
  DescNullsLast
}

type PageInfo {
  endCursor: String

  hasNextPage: Boolean!

  hasPreviousPage: Boolean!

  startCursor: String
}

"""
The root type for querying data
"""
type Query {
  """
  Retrieve a record by its `ID`
  """
  node("The record's `ID`" nodeId: ID!): Node

  """
  A pagable collection of type `product`
  """
  productCollection("Query the first `n` records in the collection" first: Int, "Query the last `n` records in the collection" last: Int, "Query values in the collection before the provided cursor" before: Cursor, "Query values in the collection after the provided cursor" after: Cursor, "Filters to apply to the results set when querying from the collection" filter: productFilter, "Sort order to apply to the collection" orderBy: [productOrderBy!]): productConnection
}

"""
A string
"""
scalar String

"""
Boolean expression comparing fields on type "String"
"""
input StringFilter {
  eq: String

  gt: String

  gte: String

  ilike: String

  in: [String!]

  is: FilterIs

  like: String

  lt: String

  lte: String

  neq: String

  startsWith: String
}

"""
A time without date information
"""
scalar Time

"""
Boolean expression comparing fields on type "Time"
"""
input TimeFilter {
  eq: Time

  gt: Time

  gte: Time

  in: [Time!]

  is: FilterIs

  lt: Time

  lte: Time

  neq: Time
}

"""
A universally unique identifier
"""
scalar UUID

"""
Boolean expression comparing fields on type "UUID"
"""
input UUIDFilter {
  eq: UUID

  in: [UUID!]

  is: FilterIs

  neq: UUID
}

"""
A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.\n\nIn some cases, you need to provide options to alter GraphQL execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.
"""
type __Directive {
  args(includeDeprecated: Boolean = false): [__InputValue!]!

  description: String

  isRepeatable: Boolean!

  locations: [__DirectiveLocation!]!

  name: String!
}

"""
A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.
"""
enum __DirectiveLocation {
  """
  Location adjacent to a query operation.
  """
  QUERY

  """
  Location adjacent to a mutation operation.
  """
  MUTATION

  """
  Location adjacent to a subscription operation.
  """
  SUBSCRIPTION

  """
  Location adjacent to a field.
  """
  FIELD

  """
  Location adjacent to a fragment definition.
  """
  FRAGMENT_DEFINITION

  """
  Location adjacent to a fragment spread.
  """
  FRAGMENT_SPREAD

  """
  Location adjacent to an inline fragment.
  """
  INLINE_FRAGMENT

  """
  Location adjacent to a variable definition.
  """
  VARIABLE_DEFINITION

  """
  Location adjacent to a schema definition.
  """
  SCHEMA

  """
  Location adjacent to a scalar definition.
  """
  SCALAR

  """
  Location adjacent to an object type definition.
  """
  OBJECT

  """
  Location adjacent to a field definition.
  """
  FIELD_DEFINITION

  """
  Location adjacent to an argument definition.
  """
  ARGUMENT_DEFINITION

  """
  Location adjacent to an interface definition.
  """
  INTERFACE

  """
  Location adjacent to a union definition.
  """
  UNION

  """
  Location adjacent to an enum definition.
  """
  ENUM

  """
  Location adjacent to an enum value definition.
  """
  ENUM_VALUE

  """
  Location adjacent to an input object type definition.
  """
  INPUT_OBJECT

  """
  Location adjacent to an input object field definition.
  """
  INPUT_FIELD_DEFINITION
}

"""
One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.
"""
type __EnumValue {
  deprecationReason: String

  description: String

  isDeprecated: Boolean!

  name: String!
}

"""
Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.
"""
type __Field {
  args(includeDeprecated: Boolean = false): [__InputValue!]!

  deprecationReason: String

  description: String

  isDeprecated: Boolean!

  name: String!

  type: __Type!
}

"""
Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.
"""
type __InputValue {
  """
  A GraphQL-formatted string representing the default value for this input value.
  """
  defaultValue: String

  deprecationReason: String

  description: String

  isDeprecated: Boolean!

  name: String!

  type: __Type!
}

"""
A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.
"""
type __Schema {
  description: String

  """
  A list of all directives supported by this server.
  """
  directives(includeDeprecated: Boolean = false): [__Directive!]!

  """
  If this server supports mutation, the type that mutation operations will be rooted at.
  """
  mutationType: __Type

  """
  The type that query operations will be rooted at.
  """
  queryType: __Type!

  """
  If this server support subscription, the type that subscription operations will be rooted at.
  """
  subscriptionType: __Type

  """
  A list of all types supported by this server.
  """
  types: [__Type!]!
}

"""
The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\n\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByURL`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types 
"""
type __Type {
  description: String

  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]

  fields(includeDeprecated: Boolean = false): [__Field!]

  inputFields(includeDeprecated: Boolean = false): [__InputValue!]

  interfaces: [__Type!]

  kind: __TypeKind!

  name: String

  ofType: __Type

  possibleTypes: [__Type!]

  specifiedByURL: String
}

"""
An enum describing what kind of type a given `__Type` is.
"""
enum __TypeKind {
  SCALAR

  OBJECT

  INTERFACE

  UNION

  ENUM

  INPUT_OBJECT

  LIST

  NON_NULL
}

type product implements Node {
  """
  Globally Unique Record Identifier
  """
  nodeId: ID!

  id: BigInt!

  created_at: Datetime

  name: String

  price: Float

  stock: BigFloat

  image: String

  user: UUID
}

type productConnection {
  edges: [productEdge!]!

  pageInfo: PageInfo!
}

type productDeleteResponse {
  """
  Count of the records impacted by the mutation
  """
  affectedCount: Int!

  """
  Array of records impacted by the mutation
  """
  records: [product!]!
}

type productEdge {
  cursor: String!

  node: product!
}

input productFilter {
  id: BigIntFilter

  created_at: DatetimeFilter

  name: StringFilter

  price: FloatFilter

  stock: BigFloatFilter

  image: StringFilter

  user: UUIDFilter

  nodeId: IDFilter
}

input productInsertInput {
  created_at: Datetime

  name: String

  price: Float

  stock: BigFloat

  image: String

  user: UUID
}

type productInsertResponse {
  """
  Count of the records impacted by the mutation
  """
  affectedCount: Int!

  """
  Array of records impacted by the mutation
  """
  records: [product!]!
}

input productOrderBy {
  id: OrderByDirection

  created_at: OrderByDirection

  name: OrderByDirection

  price: OrderByDirection

  stock: OrderByDirection

  image: OrderByDirection

  user: OrderByDirection
}

input productUpdateInput {
  created_at: Datetime

  name: String

  price: Float

  stock: BigFloat

  image: String

  user: UUID
}

type productUpdateResponse {
  """
  Count of the records impacted by the mutation
  """
  affectedCount: Int!

  """
  Array of records impacted by the mutation
  """
  records: [product!]!
}

schema {
  query: Query
  mutation: Mutation
}
